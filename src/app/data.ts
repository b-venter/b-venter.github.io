import { Article } from './datainterface';

//Blog article below
/*
*id: +1 from previous
*themePic: '/assets/img/id-theme.jpg
*article: any pictures should be <img src='/assets/img/1-picA.png'> '/assets/img/id'-pic'A-Za-z'.jpg. Placement of picture should use class='right|center|left'
*/
export const ARTICLE: Article[] = [
    {
        "id": 0,
        "themePic": "/assets/img/0-theme.png",
        "attrPic": "Photo by RetroSupply on Unsplash",
        "themeText": "Angular blog on Github pages",
        "author": "Brian Venter",
        "date": "2021-05-13T08:29:08.273Z",
        "summary": "Creating a blog by using an Angular Single Page Application and a text file database",
        "article": "<p>This blog is built with Angular and served by Github pages. The database for this blog is a text file. That last sentence is correct, it is not a typo.</p><p>One of the challenges with hosting a progressive blog by means of Github pages is storing the articles. And there are a number of challenges with this. If you host the database somewhere else, any connection authentication details will be open for all to see. One can serve static pages for each new article, but this doesn't quite fit the idea of using a framework. So how does this blog work? Well, you may already be examining the code (open an issue if you have some positive criticism to share), but here is the general breakdown.</p><p>The framework, as mentioned, is Angular along with the Material library. This simplifies much of the development of the Single Page Application and its general theming. The database is a text file. To be precise, it is a TypeScript text file. Each article is an array item and themed according to the key-value pair. The string contents of the <i>article</i> key has HTML tags included for basic layout (paragraphs, bold, italics, img, etc) The blog is deployed to Github pages using the npm package angular-cli-ghpages.</p><p><i>Is this the most efficient way to have a blog?</i> No. <i>Can it easily scale?</i> No. <b>So why do it this way?</b> Let us put aside the not-so-witty 'because I can'. For one, it is a neat exercise in getting to know Angular, SPAs and Github pages. It also provides a simple setup that helps illustrate the various components, templates, modules and routing that make up an Angular application. And the text file database is a reasonable starting point for understanding Observables and working with a data service. By no means is this blog a best practice or easy rollout revolutionary. For me, though, it is an interesting learning path. And that really is the purpose of this blog: capturing lessons learned in the telecommunications industry whilst at the same time learning new concepts and dabbling in different programming languages.</p><p>I am not a prolific writer, and thus this blog will not be growing at a rapid rate. However, some day it really may not be a practical SPA if I am still using the text file as my database. At that point I will likely implement an API gateway (like Labstack's Echo server written in Go) and database server, while tweaking the Angular SPA's code to GET the article information using its HTTPClient utility. But I may keep the latest three articles as part of the text database - just in case someone can benefit from it.<p><p>If you have any suggestions - CSS, HTML, Angular, or something else related - feel free to open an issue. There is always room for improvement.<p>"
    },
    {
        "id": 1,
        "themePic": "/assets/img/1-theme.png",
        "attrPic": "Photo by Brian Venter",
        "themeText": "MXONE in Azure Cloud",
        "author": "Brian Venter",
        "date": "2021-04-29T08:53:44.970Z",
        "summary": "Setting up Mitel's MXONE on Azure with Linux CLI - Part 1",
        "article": "<p>I have been keen on testing Mitel's MXONE in the cloud ever since the Azure image was released. This also required becoming more acquainted with Microsoft's Azure platform. And I want to do this without booting into Windows. It would need to be a purely Linux experience on my end.</p><p>In this first part I document practical first steps with Azure and getting your Linux environment prepared. In the parts to follow we will create the Resource Group and network for the MXONE. We will also set up a point-to-site VPN. From there will get a small virtual machine up and SSH to it. This virtual machine is a temporary one and its purpose is purely to get the MXONE's VHD extracted and copie across. (The extracted VHD is 100GB in size and the copy always failed after a long wait. Instead, I copied the 7GB compressed file up to a temporary virtual machine, unzip it and copy it across as a managed disk).</p><p><h1>Getting started.</h1>I won't go through setting up an Azure account. But there is one suggestion I have: setup balance warnings and limits. This is crucial to avoid having costs run away from you.<br><br>Let's get the Azure client software installed (<a href='https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux?pivots=zypper'>link</a>). Here are the commands for openSuse:<li>sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc</li><li>sudo zypper addrepo --name 'Azure CLI' --check https://packages.microsoft.com/yumrepos/azure-cli azure-cli</li><li>sudo zypper install --from azure-cli azure-cli</li><br>Although this walkthrough uses AZCopy on the temporary virtual machine, I am going to document it at this point for reference. <a href='https://docs.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-v10#download-and-install-azcopy'>Download</a> and extract it. For ease of use, you can do the following to make it executable from anywhere if you are using BaSH:<li>Make the binary executable: <b>chmod +x /path/to/azcopy</b></li><li>Edit <b>.bashrc</b></li><li>Add the following to the end of the file: <i>alias azcopy=/path/to/azcopy</i></li><li>Save and exit file. Exit your shell and/or start a new one.</li>Test your Azure CLI and AZCopy installations:<br><b>az login</b> will login your Azure CLI.<br><b>azcopy login --tenant-id 'tenant-id-as-see-in-az-login-output'</b> will login your azcopy client.<br><br>AZCopy was still a bit buggy with logins. Even on brand new virtual machines. Whether I used Ubuntu or openSuse. Fortunately the errors are pretty well documented with solutions - although at first you will think the problem is on your side. Some issues are experienced with keyctl, others occur because the Python install isn't from homebrew. If you find your AZCopy login fails at this point: search the error along with azcopy. There is a good chance the problem and solution has already been documented.<br></p><p>So at this point you have your Azure setup and are ready to run some API commands. In the <a href='./blog/2'>next part</a> we will setup the Azure Resource Group for the MX-ONE.</p><br>"
    },
    {
        "id": 2,
        "themePic": "/assets/img/2-theme.png",
        "attrPic": "Photo by Brian Venter",
        "themeText": "MXONE Network in Azure",
        "author": "Brian Venter",
        "date": "2021-06-11T15:29:31.781Z",
        "summary": "Setting up Mitel's MXONE on Azure with Linux CLI - Part 2",
        "article": "<p><a href='./blog/1'>Last time</a> we got Azure ready for use. In this part we will create the Resource Group, which really creates the Azure environment for our MXONE. In a production environment, the Resource Group may be an existing one. (Read more about the Resource Group <a href='https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/manage-resource-groups-portal#what-is-a-resource-group'> here</a>) As part of the resource group, we will:<br><li>Specify the data center region to locate our voice network</li><li>Create the network and subnet for our call, media and database server(s)</li><li>Create a P2S (Point-2-site) VPN</li><i>In production, the VPN would be S2S (site-to-site), but for this exercise we will just register a softphone from our machine to the MXONE we have in Azure.</i><br><br><h1>Make life easier</h1> ...by gathering your data ahead of time into environment variables. Here is a table of some of the environment variables you will use quite often.<br><table border='1'><tr><th>ENV</th><th>What we used</th><th>Notes</th></tr><tr><td>MXRESGRP</td><td>MxoneTest</td><td>A descriptive name of your choice</td></tr><tr><td>MXREGION</td><td>southafricanorth</td><td>Data center region. Use the command <i>az account list-locations -o table</i> to get a list, or visit <a href='https://azure.microsoft.com/en-au/global-infrastructure/geographies/'>here</a></td></tr><tr><td>MXVNET</td><td>mxnet</td><td>Main virtual network name for this RG</td></tr><tr><td>MXSUBNET</td><td>mxSubnetA</td><td>Name for the subnet being used for the MXONE / voice services</td></tr><tr><td>MXVPN</td><td>MXvpnIP</td><td>Descriptive name for VPN.</td></tr><tr><td>MXVPNGW</td><td>MXVPNGateway</td><td>Name of the VPN Gateway</td></tr></table><br><br>Here is an example network setup that we will be initiating:<br> <img src='/assets/img/2-picC.png'>.</p><p><h1>Get going</h1>Assuming that you have logged in (<i>az login</i>) with Azure CLI client, we can create our resource group:<blockquote><i>az group create --name $MXRESGRP -l $MXREGION</i></blockquote> Next, let's create the network:<blockquote><i>az network vnet create --name $MXVNET --resource-group $MXRESGRP --location $MXREGION --address-prefix \"10.2.0.0/16\" --subnet-name $MXSUBNET --subnet-prefix \"10.2.3.0/24\"</i></blockquote>We also want to reserve two IP addresses: the MXONE base IP and the alias for Cassandra. We do this by creating NICs:<blockquote><i>az network nic create --name lim001Nic1 --resource-group $MXRESGRP --location $MXREGION --subnet $MXSUBNET --private-ip-address 10.2.3.4 --vnet-name $MXVNET --public-ip-address \"\"</i></blockquote><blockquote><i>az network nic create --name lim001Nic2 --resource-group $MXRESGRP --location $MXREGION --subnet $MXSUBNET --private-ip-address 10.2.3.5 --vnet-name $MXVNET --public-ip-address \"\"</i></blockquote></p><p><h1>Getting a secure connection</h1><a href='https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-point-to-site-resource-manager-portal#creategw'>Here</a> is the reference material for setting up the VPN connection. Note that you do not want to use VPN gateway type \"Basic\". We start by getting a public IP: <blockquote><i>az network public-ip create -g $MXRESGRP -n $MXVPN</i></blockquote>Next, we assign a portion of our Virtual Network to be used for VPN gateways. The name \"GatewaySubnet\" is required as is - it is not a custom label field:<blockquote><i>az network vnet subnet create --vnet-name $MXVNET -n \"GatewaySubnet\" -g $MXRESGRP --address-prefix \"10.2.1.0/27\"</i></blockquote>And now we can create the VPN gateway, linking it to the public IP we created and assigning a totally separate pool of addresses that can be assigned to VPN clients:<blockquote><i>az network vnet-gateway create -g $MXRESGRP -n $MXVPNGW --location $MXREGION --vnet $MXVNET --gateway-type Vpn --sku VpnGw2 --vpn-type RouteBased --address-prefixes \"10.9.9.0/27\" --vpn-gateway-generation Generation2 --public-ip-address $MXVPN --client-protocol IkeV2 OpenVPN</i></blockquote>To view it: <i>az network vnet-gateway list -g $MXRESGRP</i><br><br>To complete the VPN gateway setup, we need to load the Root CA. For our test environment, we can create one:<blockquote>Ensure that you have <b>ipsec</b> and <b>StrongSwan</b> installed.<br>Create a directory where you want to create the certificates: <i>mkdir -p azure-certs</i><br><i>cd azure-certs</i><br>Now we want to generate the Root certificate: <i>sudo ipsec pki --gen --outform pem > caKey.pem</i><br>And put it in PEM format: <i>sudo ipsec pki --self --in caKey.pem --dn \"CN=VPN CA\" --ca --outform pem > caCert.pem</i><br>Now to import the certificate to our VPN Gateway, use <i>openssl x509 -in /path/to/caCert.pem -outform der | base64 -w0 ; echo</i> to get it in the correct format for Azure (yes, you need to change /path/to/). I set it as an environment variable ($MXROOTCERT) for uploading as can be seen next:<br><i>az network vnet-gateway root-cert create -g $MXRESGRP -n \"P2SRoot\" --gateway-name MXVPNGW --public-cert-data $MXROOTCERT</i></blockquote><br>It is now time to get our client prepared.<blockquote>Start by generating a password (I used <i>apg -m 15 -n 1</i> and passed it to PASSWORD) and choosing your username (I set USERNAME as \"test\").<br>With that chosen, generate the client certificate:<br><i>sudo ipsec pki --gen --outform pem > \"${USERNAME}Key.pem\"</i><br><i>sudo ipsec pki --pub --in \"${USERNAME}Key.pem\" | sudo ipsec pki --issue --cacert caCert.pem --cakey caKey.pem --dn \"CN=${USERNAME}\" --san \"${USERNAME}\" --flag clientAuth --outform pem > \"${USERNAME}Cert.pem\"</i><br><i>openssl pkcs12 -in \"${USERNAME}Cert.pem\" -inkey \"${USERNAME}Key.pem\" -certfile caCert.pem -export -out \"${USERNAME}.p12\" -password \"pass:${PASSWORD}\"</i><br>Generate the VPN server config package prepared by Azure with <i>az network vnet-gateway vpn-client generate -g $MXRESGRP -n $MXVPNGW</i><br>Use the link from the output to download the archive (you can regenerate the download link with <i>az network vnet-gateway vpn-client show-url -g $MXRESGRP -n $MXVPNGW</i> if you missed it)<br>From the extracted archive, copy the \"Generic\\\\VPNServerRoot.cer\" to <b>/etc/ipsec.d/cacerts/</b>. Copy the <b>test.p12</b> from your generated certificates to <b>/etc/ipsec.d/private/</b>.<br><br>Edit <b>/etc/ipsec.conf</b> to resemble the following picture. This information can be found in the XML file present in the VPN package archive you downloaded from Azure.<br><img src='/assets/img/2-picA.png'><br><br>Next, edit <b>/etc/ipsec.secrets</b> to contain USERNAME and PASSWORD for the client certificate, as illustrated by the next image. Note too that the certificate type of P12 is specified.<br><img src='/assets/img/2-picB.png'><br>You can get connected now by first restarting <b>ipsec</b> so that the new config is loaded, and then connecting:<br><i>sudo ipsec restart</i><br><i>sudo ipsec up azure</i><br>You will note that the \"azure\" matches the entry in <b>/etc/ipsec.conf</b> (for those not that familiar with ipsec).<br> You can disconnect by running <i>sudo ipsec down azure</i></blockquote><br>That completes Part 2: our Resource Group is created, as is our Networking - complete with VPN access. In the last part (<a href='./blog/3'>Part 3</a>) we will copy across the MXONE Azure image and use it to get an MXONE up and running.</p>"
    },
  ];
